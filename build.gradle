plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.4'
    id 'io.spring.dependency-management' version '1.0.14.RELEASE'
    id 'jacoco'
    id "org.sonarqube" version "3.4.0.2513"
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'com.plzgraduate'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    querydsl.extendsFrom compileClasspath
}

repositories {
    mavenCentral()
}

ext {
    set('queryDslVersion', "5.0.0")
}

jacoco {
    toolVersion = "0.8.11"
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'com.auth0:java-jwt:4.2.1'
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.6'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation "com.google.guava:guava:32.1.3-jre"
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"
//    implementation 'org.flywaydb:flyway-core:6.4.2'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.15'
    implementation 'io.sentry:sentry-logback:1.7.30'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    runtimeOnly 'mysql:mysql-connector-java'
    compileOnly 'org.projectlombok:lombok:1.18.30'

    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation 'org.testng:testng:7.9.0'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.mockito', module: 'mockito-core'
    }
    testImplementation 'org.springframework.security:spring-security-test'
    // Testcontainers BOM to align versions
    testImplementation platform('org.testcontainers:testcontainers-bom:1.19.0')
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:testcontainers'
    testImplementation 'org.testcontainers:mysql'
    // Mockito inline for mocking
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
}
tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

test {
    useJUnitPlatform()
    jvmArgs += [
        "--add-opens=java.base/java.lang=ALL-UNNAMED",
        "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
        "--add-opens=java.base/java.util=ALL-UNNAMED",
        "--add-opens=java.base/java.io=ALL-UNNAMED"
    ]
}

jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/plzgraduate/myongjigraduatebe/core/**",
                    "com/plzgraduate/myongjigraduatebe/*Request*",
                    "com/plzgraduate/myongjigraduatebe/*Command*",
                    "com/plzgraduate/myongjigraduatebe/*Response*",
                    "com/plzgraduate/myongjigraduatebe/*Mapper*"
            ])
        }))
    }
    reports {
        html.enabled true
        xml.enabled true
        csv.enabled false
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "Myongji-Graduate_MyongjiGraduate-BE"
        property "sonar.organization", "mg-sc-gh-con-key"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

jar {
    enabled = false
}

def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets {
    main.java.srcDir querydslDir
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}
